// Karno Haritası Web Uygulaması JavaScript

console.log('🔧 Karno Script dosyası yüklendi!');

// Global uygulama değişkeni
let karnoApp;

class KarnoMap {
    constructor() {
        console.log('🚀 KarnoMap constructor başlatıldı');
        console.log('📍 DOM readyState:', document.readyState);
        
        this.variableCount = 4;
        this.variables = ['A', 'B', 'C', 'D'];
        this.truthTable = [];
        this.karnoValues = []; // Başlangıçta boş, generateTruthTable'da dolduracağız
        this.groups = [];
        this.currentMethod = 'truthTable';
        this.isLocked = false; // Gruplar bulunduktan sonra kilitleme durumu
        this.hasGroups = false; // Grup varlığını takip et
        
        // DOM elementlerinin varlığını kontrol et
        const domCheck = this.checkDOMElements();
        if (!domCheck) {
            console.error('❌ DOM elementleri eksik, 2 saniye sonra tekrar deneniyor...');
            setTimeout(() => {
                const secondCheck = this.checkDOMElements();
                if (secondCheck) {
                    this.initializeApp();
                } else {
                    console.error('❌ İkinci denemede de DOM elementleri bulunamadı');
                    console.error('❌ Sayfanın tam yüklenmesini bekleyin ve tekrar deneyin');
                }
            }, 2000);
            return;
        }
        
        this.initializeApp();
    }
    
    initializeApp() {
        console.log('🔧 Uygulama başlatılıyor...');
        
        this.initializeEventListeners();
        console.log('✅ Event listeners başlatıldı');
        
        this.generateTruthTable();
        console.log('✅ Truth table oluşturuldu');
        
        this.generateKarnoMap();
        console.log('✅ Karno map oluşturuldu');
        
        // DOM render'ının tamamlanması için kısa bir gecikme
        setTimeout(() => {
            this.verifyRendering();
        }, 100);
        
        // Boş harita ile başla - rastgele değerler oluşturma
        console.log('📋 Boş Karno haritası ile başlanıyor...');
    }

    checkDOMElements() {
        console.log('🔍 DOM elementleri kontrol ediliyor...');
        
        const requiredElements = [
            'truthTableContainer',
            'karnoMapContainer',
            'variableCount',
            'truthTableBtn',
            'mintermsBtn'
        ];
        
        const missing = [];
        requiredElements.forEach(id => {
            const element = document.getElementById(id);
            if (!element) {
                missing.push(id);
                console.warn(`❌ Element bulunamadı: ${id}`);
            } else {
                console.log(`✅ Element bulundu: ${id}`);
            }
        });
        
        if (missing.length > 0) {
            console.error('❌ Eksik DOM elementleri:', missing);
            return false;
        } else {
            console.log('✅ Tüm gerekli DOM elementleri mevcut');
            return true;
        }
    }
    
    verifyRendering() {
        console.log('🔍 Render durumu kontrol ediliyor...');
        
        // Truth table kontrolü
        const truthTableCells = document.querySelectorAll('.truth-table td');
        console.log('📊 Truth table hücreleri:', truthTableCells.length);
        
        // Karno map kontrolü
        const karnoCells = document.querySelectorAll('.karno-cell');
        console.log('🗂️ Karno map hücreleri:', karnoCells.length);
        
        if (truthTableCells.length === 0) {
            console.error('❌ Truth table render edilmemiş!');
        }
        
        if (karnoCells.length === 0) {
            console.error('❌ Karno map render edilmemiş!');
        }
        
        if (truthTableCells.length > 0 && karnoCells.length > 0) {
            console.log('✅ Her ikisi de başarıyla render edildi!');
        }
    }

    initializeEventListeners() {
        console.log('Event listeners başlatılıyor');
        
        // Variable count change
        const variableSelect = document.getElementById('variableCount');
        if (variableSelect) {
            variableSelect.addEventListener('change', (e) => {
                this.variableCount = parseInt(e.target.value);
                this.variables = ['A', 'B', 'C', 'D'].slice(0, this.variableCount);
                this.generateTruthTable();
                this.generateKarnoMap();
                this.clearResults();
                
                // Değişken sayısı değiştiğinde boş harita ile başla
                console.log('🔄 Değişken sayısı değişti, boş harita oluşturuluyor...');
            });
        }

        // Input method switching
        const truthTableBtn = document.getElementById('truthTableBtn');
        if (truthTableBtn) {
            truthTableBtn.addEventListener('click', () => {
                this.switchInputMethod('truthTable');
            });
        }

        const mintermsBtn = document.getElementById('mintermsBtn');
        if (mintermsBtn) {
            mintermsBtn.addEventListener('click', () => {
                this.switchInputMethod('minterms');
            });
        }

        // Action buttons
        const clearBtn = document.getElementById('clearBtn');
        if (clearBtn) {
            clearBtn.addEventListener('click', () => {
                this.clearAll();
            });
        }

        const randomBtn = document.getElementById('randomBtn');
        if (randomBtn) {
            randomBtn.addEventListener('click', () => {
                this.generateRandom();
            });
        }

        // Minterm input
        const applyMinterms = document.getElementById('applyMinterms');
        if (applyMinterms) {
            applyMinterms.addEventListener('click', () => {
                this.applyMinterms();
            });
        }

        // Map controls
        const findGroupsBtn = document.getElementById('findGroupsBtn');
        if (findGroupsBtn) {
            findGroupsBtn.addEventListener('click', () => {
                this.findGroups();
            });
        }

        const showSolutionBtn = document.getElementById('showSolutionBtn');
        if (showSolutionBtn) {
            showSolutionBtn.addEventListener('click', () => {
                this.showSolution();
            });
        }
    }

    switchInputMethod(method) {
        this.currentMethod = method;
        
        // Update button states
        document.querySelectorAll('.method-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        
        if (method === 'truthTable') {
            const truthTableBtn = document.getElementById('truthTableBtn');
            const truthTablePanel = document.getElementById('truthTablePanel');
            const mintermsPanel = document.getElementById('mintermsPanel');
            
            if (truthTableBtn) truthTableBtn.classList.add('active');
            if (truthTablePanel) truthTablePanel.classList.add('active');
            if (mintermsPanel) mintermsPanel.classList.remove('active');
        } else {
            const mintermsBtn = document.getElementById('mintermsBtn');
            const mintermsPanel = document.getElementById('mintermsPanel');
            const truthTablePanel = document.getElementById('truthTablePanel');
            
            if (mintermsBtn) mintermsBtn.classList.add('active');
            if (mintermsPanel) mintermsPanel.classList.add('active');
            if (truthTablePanel) truthTablePanel.classList.remove('active');
        }
    }

    generateTruthTable() {
        console.log('generateTruthTable çağrıldı');
        const rows = Math.pow(2, this.variableCount);
        this.truthTable = [];
        
        // KarnoValues array'ini doğru boyutta initialize et
        this.karnoValues = new Array(rows).fill(0);
        
        for (let i = 0; i < rows; i++) {
            const row = {};
            for (let j = 0; j < this.variableCount; j++) {
                const varName = this.variables[j];
                row[varName] = (i >> (this.variableCount - 1 - j)) & 1;
            }
            row.output = 0; // Default output
            row.minterm = i;
            this.truthTable.push(row);
        }

        console.log('Doğruluk tablosu oluşturuldu:', this.truthTable);
        console.log('KarnoValues initialize edildi:', this.karnoValues);
        this.renderTruthTable();
        this.updateKarnoFromTruthTable();
    }

    renderTruthTable() {
        console.log('renderTruthTable çağrıldı');
        const container = document.getElementById('truthTableContainer');
        console.log('Container bulundu:', container);
        
        if (!container) {
            console.error('truthTableContainer bulunamadı!');
            return;
        }
        
        let html = '<table class="truth-table"><thead><tr>';
        
        // Variable headers
        for (const variable of this.variables) {
            html += `<th>${variable}</th>`;
        }
        html += '<th>F</th></tr></thead><tbody>';

        // Table rows
        for (let i = 0; i < this.truthTable.length; i++) {
            const row = this.truthTable[i];
            html += '<tr>';
            
            for (const variable of this.variables) {
                html += `<td>${row[variable]}</td>`;
            }
            
            const outputClass = row.output === 1 ? 'selected' : 
                               row.output === 'X' ? 'dont-care' : '';
            
            html += `<td class="output-cell ${outputClass}" 
                     data-row="${i}" onclick="karnoApp.toggleOutput(${i})">
                     ${row.output}
                   </td>`;
            html += '</tr>';
        }

        html += '</tbody></table>';
        container.innerHTML = html;
        console.log('Doğruluk tablosu render edildi');
    }

    toggleOutput(rowIndex) {
        console.log('toggleOutput çağrıldı, rowIndex:', rowIndex);
        const currentValue = this.truthTable[rowIndex].output;
        // 0 -> 1 -> X -> 0 döngüsü
        if (currentValue === 0) {
            this.truthTable[rowIndex].output = 1;
        } else if (currentValue === 1) {
            this.truthTable[rowIndex].output = 'X';
        } else {
            this.truthTable[rowIndex].output = 0;
        }
        this.renderTruthTable();
        this.updateKarnoFromTruthTable();
        this.clearResults();
        
        // Otomatik grup bulma kaldırıldı - kullanıcı manuel olarak butsona basacak
        console.log('💡 Değişiklik yapıldı, grupları bulmak için "Grupları Bul" butonuna basın');
    }

    updateKarnoFromTruthTable() {
        this.karnoValues = this.truthTable.map(row => row.output);
        this.renderKarnoMap();
    }

    generateKarnoMap() {
        console.log('generateKarnoMap çağrıldı');
        const container = document.getElementById('karnoMapContainer');
        console.log('Karno container bulundu:', container);
        
        if (!container) {
            console.error('karnoMapContainer bulunamadı!');
            return;
        }
        
        if (this.variableCount === 2) {
            this.generateKarno2Var(container);
        } else if (this.variableCount === 3) {
            this.generateKarno3Var(container);
        } else if (this.variableCount === 4) {
            this.generateKarno4Var(container);
        }
    }

    generateKarno2Var(container) {
        console.log('2 değişkenli Karno haritası oluşturuluyor');
        let html = `
            <div class="karno-map map-2var">
                <div class="karno-labels">
                    <div class="label-top" style="position: absolute; top: -35px; left: 20px; display: flex; justify-content: space-around; width: 120px;">
                        <span>0</span><span>1</span>
                    </div>
                    <div class="label-top" style="position: absolute; top: -50px; left: 0; right: 0; text-align: center; font-weight: bold;">B</div>
                    <div class="label-left" style="position: absolute; left: -35px; top: 20px; display: flex; flex-direction: column; justify-content: space-around; height: 120px;">
                        <span>0</span><span>1</span>
                    </div>
                    <div class="label-left" style="position: absolute; left: -50px; top: 0; bottom: 0; writing-mode: vertical-lr; display: flex; align-items: center; font-weight: bold;">A</div>
                </div>
        `;

        // 2 değişken Gray code: A\B: 0, 1
        const order = [0, 1, 3, 2]; // A=0,B=0; A=0,B=1; A=1,B=1; A=1,B=0

        for (let i = 0; i < 4; i++) {
            const minterm = order[i];
            html += `<div class="karno-cell" data-minterm="${minterm}">
                       <div class="minterm-label">m${minterm}</div>
                       <span class="cell-value">${this.karnoValues[minterm] || 0}</span>
                     </div>`;
        }

        html += '</div>';
        container.innerHTML = html;
        
        // Event listener'ları JavaScript ile ekle
        this.addCellEventListeners();
    }

    generateKarno3Var(container) {
        console.log('3 değişkenli Karno haritası oluşturuluyor');
        let html = `
            <div class="karno-map map-3var">
                <div class="karno-labels">
                    <div class="label-top" style="position: absolute; top: -35px; left: 20px; display: flex; justify-content: space-around; width: 240px;">
                        <span>00</span><span>01</span><span>11</span><span>10</span>
                    </div>
                    <div class="label-top" style="position: absolute; top: -50px; left: 0; right: 0; text-align: center; font-weight: bold;">BC</div>
                    <div class="label-left" style="position: absolute; left: -35px; top: 20px; display: flex; flex-direction: column; justify-content: space-around; height: 120px;">
                        <span>0</span><span>1</span>
                    </div>
                    <div class="label-left" style="position: absolute; left: -50px; top: 0; bottom: 0; writing-mode: vertical-lr; display: flex; align-items: center; font-weight: bold;">A</div>
                </div>
        `;

        // 3 değişken Gray code: A\BC: 00, 01, 11, 10
        const order = [
            0, 1, 3, 2,  // A=0: BC=00,01,11,10
            4, 5, 7, 6   // A=1: BC=00,01,11,10
        ];

        for (let i = 0; i < 8; i++) {
            const minterm = order[i];
            html += `<div class="karno-cell" data-minterm="${minterm}">
                       <div class="minterm-label">m${minterm}</div>
                       <span class="cell-value">${this.karnoValues[minterm] || 0}</span>
                     </div>`;
        }

        html += '</div>';
        container.innerHTML = html;
        
        // Event listener'ları JavaScript ile ekle
        this.addCellEventListeners();
    }

    generateKarno4Var(container) {
        console.log('4 değişkenli Karno haritası oluşturuluyor');
        console.log('Container mevcut:', container);
        console.log('KarnoValues durumu:', this.karnoValues);
        
        let html = `
            <div class="karno-map map-4var">
                <div class="karno-labels">
                    <div class="label-top" style="position: absolute; top: -35px; left: 20px; display: flex; justify-content: space-around; width: 240px;">
                        <span>00</span><span>01</span><span>11</span><span>10</span>
                    </div>
                    <div class="label-top" style="position: absolute; top: -50px; left: 0; right: 0; text-align: center; font-weight: bold;">CD</div>
                    <div class="label-left" style="position: absolute; left: -35px; top: 20px; display: flex; flex-direction: column; justify-content: space-around; height: 240px;">
                        <span>00</span><span>01</span><span>11</span><span>10</span>
                    </div>
                    <div class="label-left" style="position: absolute; left: -50px; top: 0; bottom: 0; writing-mode: vertical-lr; display: flex; align-items: center; font-weight: bold;">AB</div>
                </div>
        `;

        // Gray code sıralaması: AB\CD: 00, 01, 11, 10
        const order = [
            0,  1,  3,  2,   // AB=00: CD=00,01,11,10
            4,  5,  7,  6,   // AB=01: CD=00,01,11,10
            12, 13, 15, 14,  // AB=11: CD=00,01,11,10
            8,  9,  11, 10   // AB=10: CD=00,01,11,10
        ];

        for (let i = 0; i < 16; i++) {
            const minterm = order[i];
            const value = this.karnoValues[minterm] || 0;
            html += `<div class="karno-cell" data-minterm="${minterm}">
                       <div class="minterm-label">m${minterm}</div>
                       <span class="cell-value">${value}</span>
                     </div>`;
        }

        html += '</div>';
        container.innerHTML = html;
        console.log('4 değişkenli Karno haritası HTML\'e eklendi');
        
        // Event listener'ları JavaScript ile ekle
        this.addCellEventListeners();
    }

    addCellEventListeners() {
        console.log('addCellEventListeners çağrıldı');
        const cells = document.querySelectorAll('.karno-cell');
        console.log('Bulunan hücre sayısı:', cells.length);
        
        cells.forEach(cell => {
            const minterm = parseInt(cell.dataset.minterm);
            console.log('Event listener ekleniyor, minterm:', minterm);
            
            // Click event
            cell.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('Hücre tıklandı, minterm:', minterm);
                this.toggleKarnoCell(minterm);
            });
            
            // Mouse events
            cell.addEventListener('mouseenter', (e) => {
                this.highlightCellGroups(minterm);
            });
            
            cell.addEventListener('mouseleave', (e) => {
                this.removeCellGroupHighlight();
            });
            
            // Hücreyi clickable yap
            cell.style.cursor = 'pointer';
        });
    }

    toggleKarnoCell(minterm) {
        console.log('toggleKarnoCell çağrıldı, minterm:', minterm);
        
        // Gruplar bulunduktan sonra minterm girişi engelle
        if (this.isLocked && this.hasGroups) {
            this.showLockMessage();
            return;
        }
        
        console.log('Mevcut karnoValues:', this.karnoValues);
        
        const currentValue = this.karnoValues[minterm] || 0;
        console.log('Mevcut değer:', currentValue);
        
        // 0 -> 1 -> X -> 0 döngüsü  
        if (currentValue === 0) {
            this.karnoValues[minterm] = 1;
        } else if (currentValue === 1) {
            this.karnoValues[minterm] = 'X';
        } else {
            this.karnoValues[minterm] = 0;
        }
        
        this.truthTable[minterm].output = this.karnoValues[minterm];
        this.renderTruthTable();
        this.renderKarnoMap();
        this.clearResults();
        
        // Otomatik grup bulma kaldırıldı - kullanıcı manuel olarak butsona basacak
        console.log('💡 Hücre değiştirildi, grupları bulmak için "Grupları Bul" butonuna basın');
    }

    renderKarnoMap() {
        console.log('renderKarnoMap çağrıldı');
        const cells = document.querySelectorAll('.karno-cell');
        console.log('Bulunan Karno hücreleri:', cells.length);
        console.log('KarnoValues durumu:', this.karnoValues);
        
        if (cells.length === 0) {
            console.error('Karno hücreleri bulunamadı! generateKarnoMap çalışmamış olabilir.');
            return;
        }
        
        cells.forEach(cell => {
            const minterm = parseInt(cell.dataset.minterm);
            const value = this.karnoValues[minterm] || 0;
            const valueSpan = cell.querySelector('.cell-value');
            if (valueSpan) {
                valueSpan.textContent = value;
            }
            
            // Hücre stillerini güncelle
            cell.classList.remove('filled', 'dont-care');
            if (value === 1) {
                cell.classList.add('filled');
            } else if (value === 'X') {
                cell.classList.add('dont-care');
            }
        });
        
        console.log('Karno haritası render edildi');
    }

    // Gelişmiş grup vurgulama - tam grup dominasyonu (güçlü renk temizleme)
    highlightCellGroups(minterm) {
        console.log('highlightCellGroups çağrıldı, minterm:', minterm);
        
        // Bu hücreyi içeren grupları bul
        const containingGroups = this.groups.filter(group => 
            group.minterms.includes(minterm)
        );
        
        if (containingGroups.length === 0) return;
        
        // ADIM 1: TÜM hover ve grup renklerini kesinlikle kaldır
        document.querySelectorAll('.karno-cell').forEach(cell => {
            cell.classList.remove('highlight-hover');
            // Tüm olası grup sınıflarını kaldır
            for (let i = 1; i <= 6; i++) {
                cell.classList.remove(`group-${i}`);
                cell.classList.remove(`group-${i}-hover`);
            }
            // Ek temizlik - olası diğer renk sınıfları
            cell.classList.remove('group-highlight', 'group-hover', 'selected');
        });
        
        // ADIM 2: Dominant grubu belirle
        const dominantGroup = containingGroups.reduce((best, current) => {
            const bestPriority = this.getGroupPriority(best, minterm);
            const currentPriority = this.getGroupPriority(current, minterm);
            return currentPriority > bestPriority ? current : best;
        });
        
        const dominantGroupIndex = this.groups.indexOf(dominantGroup);
        const dominantGroupClass = `group-${(dominantGroupIndex % 6) + 1}`;
        
        console.log(`Dominant grup: index=${dominantGroupIndex}, class=${dominantGroupClass}`);
        
        // ADIM 3: Önce dominant grubun TÜM hücrelerini vurgula
        dominantGroup.minterms.forEach(mt => {
            const cell = document.querySelector(`[data-minterm="${mt}"]`);
            if (cell) {
                // Çifte temizlik
                for (let i = 1; i <= 6; i++) {
                    cell.classList.remove(`group-${i}`);
                    cell.classList.remove(`group-${i}-hover`);
                }
                // Dominant rengi uygula
                cell.classList.add(`${dominantGroupClass}-hover`);
                console.log(`Hücre ${mt} -> ${dominantGroupClass}-hover eklendi`);
            }
        });
        
        // ADIM 4: Diğer grupları sadece kesişmeyen bölgelerde göster
        this.groups.forEach((group, index) => {
            if (group === dominantGroup) return; // Dominant grubu atla
            
            const groupClass = `group-${(index % 6) + 1}`;
            
            group.minterms.forEach(mt => {
                const cell = document.querySelector(`[data-minterm="${mt}"]`);
                if (!cell) return;
                
                // Bu hücre dominant grubun parçası mı?
                if (!dominantGroup.minterms.includes(mt)) {
                    // Kesişmiyor - bu grubun rengini güvenle ekle
                    cell.classList.add(`${groupClass}-hover`);
                    console.log(`Kesişmeyen hücre ${mt} -> ${groupClass}-hover eklendi`);
                } else {
                    console.log(`Kesişen hücre ${mt} -> renk atlandı (dominant grup hakim)`);
                }
            });
        });
        
        // ADIM 5: Mouse'un geldiği hücreyi özel vurgula
        const hoveredCell = document.querySelector(`[data-minterm="${minterm}"]`);
        if (hoveredCell) {
            hoveredCell.classList.add('highlight-hover');
            console.log(`Hover hücresi ${minterm} -> highlight-hover eklendi`);
        }
    }

    removeCellGroupHighlight() {
        console.log('removeCellGroupHighlight çağrıldı - güçlü temizlik');
        
        // Tüm hover highlight'larını kesinlikle kaldır
        document.querySelectorAll('.karno-cell').forEach(cell => {
            cell.classList.remove('highlight-hover');
            
            // Tüm olası grup sınıflarını kaldır
            for (let i = 1; i <= 6; i++) {
                cell.classList.remove(`group-${i}`);
                cell.classList.remove(`group-${i}-hover`);
            }
            
            // Ek temizlik - olası diğer hover sınıfları
            cell.classList.remove('group-highlight', 'group-hover', 'selected', 'cell-hover');
            
            // Style attribute'ta inline renkler varsa onları da kaldır
            if (cell.style.backgroundColor) {
                cell.style.backgroundColor = '';
            }
            if (cell.style.borderColor) {
                cell.style.borderColor = '';
            }
        });
        
        console.log('Tüm hover efektleri temizlendi');
    }

    clearResults() {
        this.groups = [];
        this.hasGroups = false; // Grup durumunu sıfırla
        this.unlockMap(); // Kilitlemeyi kaldır
        
        const groupsList = document.getElementById('groupsList');
        if (groupsList) {
            groupsList.innerHTML = '<p style="color: #6b7280; font-style: italic;">Henüz grup bulunamadı. "Grupları Bul" butonuna tıklayın.</p>';
        }
        
        const solutionDisplay = document.getElementById('solutionDisplay');
        if (solutionDisplay) {
            solutionDisplay.textContent = '';
        }
        
        const termCount = document.getElementById('termCount');
        if (termCount) {
            termCount.textContent = 'Terim sayısı: 0';
        }
        
        const literalCount = document.getElementById('literalCount');
        if (literalCount) {
            literalCount.textContent = 'Literal sayısı: 0';
        }
        
        // Remove group highlighting
        document.querySelectorAll('.karno-cell').forEach(cell => {
            for (let i = 1; i <= 6; i++) {
                cell.classList.remove(`group-${i}`);
            }
        });
        
        // Etiket vurgularını da temizle
        this.clearLabelHighlights();
    }

    clearAll() {
        // Tüm değerleri sıfırla
        this.karnoValues = [];
        this.truthTable.forEach(row => {
            row.output = 0;
        });
        this.renderTruthTable();
        this.renderKarnoMap();
        this.clearResults();
    }

    generateRandom() {
        // Rastgele değerler ata
        this.truthTable.forEach(row => {
            row.output = Math.random() < 0.3 ? 1 : 0; // %30 şansla 1
        });
        this.updateKarnoFromTruthTable();
        this.clearResults();
        
        // Otomatik grup bulma kaldırıldı - kullanıcı manuel olarak butsona basacak
        console.log('🎲 Rastgele değerler oluşturuldu, grupları bulmak için "Grupları Bul" butonuna basın');
        setTimeout(() => {
            this.findGroups(); // Bu da artık otomatik olarak showSolution() çağıracak
        }, 100);
    }

    applyMinterms() {
        const mintermsInput = document.getElementById('mintermsInput');
        const dontCareInput = document.getElementById('dontCareInput');
        
        if (!mintermsInput) return;
        
        // Önce tümünü sıfırla
        this.truthTable.forEach(row => {
            row.output = 0;
        });
        
        // Mintermleri uygula
        if (mintermsInput.value.trim()) {
            const minterms = mintermsInput.value.split(',').map(n => parseInt(n.trim())).filter(n => !isNaN(n));
            minterms.forEach(minterm => {
                if (minterm >= 0 && minterm < this.truthTable.length) {
                    this.truthTable[minterm].output = 1;
                }
            });
        }
        
        // Don't care'leri uygula
        if (dontCareInput && dontCareInput.value.trim()) {
            const dontCares = dontCareInput.value.split(',').map(n => parseInt(n.trim())).filter(n => !isNaN(n));
            dontCares.forEach(minterm => {
                if (minterm >= 0 && minterm < this.truthTable.length) {
                    this.truthTable[minterm].output = 'X';
                }
            });
        }
        
        this.updateKarnoFromTruthTable();
        this.clearResults();
        
        // Otomatik grup bulma kaldırıldı - kullanıcı manuel olarak butsona basacak
        console.log('💡 Mintermler uygulandı, grupları bulmak için "Grupları Bul" butonuna basın');
    }

    findGroups() {
        this.groups = [];
        
        // Aktif mintermleri (1'ler) ve don't care'leri (X'ler) bul
        const activeMinterms = this.karnoValues.map((val, idx) => val === 1 ? idx : null)
                                               .filter(idx => idx !== null);
        const dontCareMinterms = this.karnoValues.map((val, idx) => val === 'X' ? idx : null)
                                                 .filter(idx => idx !== null);
        
        // Grup bulma için hem 1'leri hem de X'leri kullan
        const allMintermsForGrouping = [...activeMinterms, ...dontCareMinterms];
        
        if (activeMinterms.length === 0) {
            this.displayGroups();
            return;
        }

        // Karno haritası kurallarına göre grupları bul (don't care'ler dahil)
        this.findKarnoGroups(allMintermsForGrouping);
        
        // Sadece aktif mintermleri kapsayan optimal grupları seç
        this.selectOptimalGroups(activeMinterms);
        
        this.displayGroups();
        this.highlightGroups();
        
        // Grup etiket analizini yap ve değişmeyen değişkenleri vurgula
        this.analyzeAndHighlightLabels();
        
        // Gruplar bulunduktan sonra çözümü otomatik göster
        setTimeout(() => {
            this.showSolution();
        }, 500); // Görsel efektlerin tamamlanması için kısa bir gecikme
        
        // Gruplar bulunduktan sonra kilitleme aktif et
        if (this.groups.length > 0) {
            this.lockMap();
        }
    }

    findKarnoGroups(minterms) {
        // Karno haritası sadeleştirme kurallarını uygula
        this.allPossibleGroups = [];
        
        if (this.variableCount === 4) {
            this.findAllGroups4Var(minterms);
        } else if (this.variableCount === 3) {
            this.findAllGroups3Var(minterms);
        } else if (this.variableCount === 2) {
            this.findAllGroups2Var(minterms);
        }
        
        // En iyi kapsama kümesini bul (Petrick's method basitleştirilmiş)
        this.findOptimalCovering(minterms);
    }

    // 4 değişkenli harita için tüm geçerli grupları bul
    findAllGroups4Var(minterms) {
        // 16'lık grup (tüm harita)
        if (minterms.length === 16) {
            this.allPossibleGroups.push({
                minterms: [...minterms],
                size: 16,
                term: '1',
                isPrime: true
            });
            return;
        }

        // 8'lik grupları bul
        this.find8Groups4Var(minterms);
        
        // 4'lük grupları bul
        this.find4Groups4Var(minterms);
        
        // 2'lik grupları bul
        this.find2Groups4Var(minterms);
        
        // Tekil hücreleri bul
        this.find1Groups4Var(minterms);
    }

    find8Groups4Var(minterms) {
        const groups8 = [
            // Yatay yarılar
            [0, 1, 2, 3, 4, 5, 6, 7],       // Üst 2 satır (AB=0x)
            [8, 9, 10, 11, 12, 13, 14, 15], // Alt 2 satır (AB=1x)
            
            // Dikey yarılar
            [0, 1, 4, 5, 8, 9, 12, 13],     // Sol 2 sütun (CD=x0)
            [2, 3, 6, 7, 10, 11, 14, 15],   // Sağ 2 sütun (CD=x1)
            
            // Satır çiftleri - A sabit
            [0, 2, 4, 6, 8, 10, 12, 14],    // A=0,C=0 ve A=1,C=0
            [1, 3, 5, 7, 9, 11, 13, 15],    // A=0,C=1 ve A=1,C=1
            
            // Değişken bazlı 8'li gruplar
            [1, 3, 5, 7, 9, 11, 13, 15],    // D=1 (tüm tek sayılar)
            [0, 2, 4, 6, 8, 10, 12, 14],    // D=0 (tüm çift sayılar)
            [4, 5, 6, 7, 12, 13, 14, 15],   // B=1 (tüm B=1 durumları)
            [0, 1, 2, 3, 8, 9, 10, 11],     // B=0 (tüm B=0 durumları)
            [2, 3, 6, 7, 10, 11, 14, 15],   // C=1 (tüm C=1 durumları)
            [0, 1, 4, 5, 8, 9, 12, 13],     // C=0 (tüm C=0 durumları)
            [8, 9, 10, 11, 12, 13, 14, 15], // A=1 (tüm A=1 durumları)
            [0, 1, 2, 3, 4, 5, 6, 7],       // A=0 (tüm A=0 durumları)
        ];

        for (const group of groups8) {
            if (this.isValidGroup(group, minterms)) {
                this.allPossibleGroups.push({
                    minterms: [...group],
                    size: 8,
                    term: this.generateOptimalTerm(group),
                    isPrime: this.isPrimeImplicant(group, minterms)
                });
            }
        }
    }

    find4Groups4Var(minterms) {
        const groups4 = [
            // 2x2 kare gruplar (Gray code düzeni: 00,01,11,10)
            [0, 1, 4, 5],    // Sol üst kare (AB=00,01, CD=00,01)
            [1, 3, 5, 7],    // Sağ üst kare (AB=00,01, CD=01,11)  
            [3, 2, 7, 6],    // Sağ orta kare (AB=00,01, CD=11,10)
            [2, 0, 6, 4],    // Sol orta kare - sarma (AB=00,01, CD=10,00)
            
            [4, 5, 12, 13],  // Sol 2. kare (AB=01,11, CD=00,01)
            [5, 7, 13, 15],  // Sağ 2. kare (AB=01,11, CD=01,11)
            [7, 6, 15, 14],  // Sağ 3. kare (AB=01,11, CD=11,10)
            [6, 4, 14, 12],  // Sol 3. kare - sarma (AB=01,11, CD=10,00)
            
            [12, 13, 8, 9],  // Sol alt kare (AB=11,10, CD=00,01)
            [13, 15, 9, 11], // Sağ alt kare (AB=11,10, CD=01,11)
            [15, 14, 11, 10], // Sağ 4. kare (AB=11,10, CD=11,10)
            [14, 12, 10, 8], // Sol 4. kare - sarma (AB=11,10, CD=10,00)
            
            // Köşe grupları (sarma)
            [0, 2, 8, 10],   // Sol köşe sarması
            [1, 3, 9, 11],   // Sağ köşe sarması
            
            // Yatay dikdörtgen gruplar (1x4)
            [0, 1, 3, 2],    // Üst satır (AB=00)
            [4, 5, 7, 6],    // 2. satır (AB=01) - İŞTE BU!
            [12, 13, 15, 14], // 3. satır (AB=11)
            [8, 9, 11, 10],  // Alt satır (AB=10)
            
            // Dikey dikdörtgen gruplar (4x1)
            [0, 4, 12, 8],   // Sol sütun (CD=00)
            [1, 5, 13, 9],   // 2. sütun (CD=01)
            [3, 7, 15, 11],  // 3. sütun (CD=11)
            [2, 6, 14, 10],  // Sağ sütun (CD=10)
        ];

        for (const group of groups4) {
            if (this.isValidGroup(group, minterms)) {
                this.allPossibleGroups.push({
                    minterms: [...group],
                    size: 4,
                    term: this.generateOptimalTerm(group),
                    isPrime: this.isPrimeImplicant(group, minterms)
                });
            }
        }
    }

    find2Groups4Var(minterms) {
        const groups2 = [];
        
        // Yatay komşular (Gray code sırasına göre)
        const rows = [
            [0, 1, 3, 2],      // 1. satır (AB=00)
            [4, 5, 7, 6],      // 2. satır (AB=01)
            [12, 13, 15, 14],  // 3. satır (AB=11)
            [8, 9, 11, 10]     // 4. satır (AB=10)
        ];
        
        for (const row of rows) {
            for (let i = 0; i < row.length; i++) {
                const next = (i + 1) % row.length; // Sarmalı komşu
                groups2.push([row[i], row[next]]);
            }
        }
        
        // Dikey komşular
        const cols = [
            [0, 4, 12, 8],     // 1. sütun
            [1, 5, 13, 9],     // 2. sütun
            [3, 7, 15, 11],    // 3. sütun
            [2, 6, 14, 10]     // 4. sütun
        ];
        
        for (const col of cols) {
            for (let i = 0; i < col.length; i++) {
                const next = (i + 1) % col.length; // Sarmalı komşu
                groups2.push([col[i], col[next]]);
            }
        }

        for (const group of groups2) {
            if (this.isValidGroup(group, minterms)) {
                this.allPossibleGroups.push({
                    minterms: [...group],
                    size: 2,
                    term: this.generateOptimalTerm(group),
                    isPrime: this.isPrimeImplicant(group, minterms)
                });
            }
        }
    }

    find1Groups4Var(minterms) {
        for (const minterm of minterms) {
            this.allPossibleGroups.push({
                minterms: [minterm],
                size: 1,
                term: this.generateOptimalTerm([minterm]),
                isPrime: this.isPrimeImplicant([minterm], minterms)
            });
        }
    }

    // 3 değişkenli harita için tüm geçerli grupları bul
    findAllGroups3Var(minterms) {
        if (minterms.length === 8) {
            this.allPossibleGroups.push({
                minterms: [...minterms],
                size: 8,
                term: '1',
                isPrime: true
            });
            return;
        }

        this.find4Groups3Var(minterms);
        this.find2Groups3Var(minterms);
        this.find1Groups3Var(minterms);
    }

    find4Groups3Var(minterms) {
        const groups4 = [
            // Tam satırlar (Gray code sırasında)
            [0, 1, 3, 2],    // Üst satır (A=0, BC=00,01,11,10)
            [4, 5, 7, 6],    // Alt satır (A=1, BC=00,01,11,10)
            
            // 2x2 kare gruplar (dikey komşu çiftler)
            [0, 1, 4, 5],    // Sol kare (BC=00,01)
            [1, 3, 5, 7],    // Orta kare (BC=01,11)
            [3, 2, 7, 6],    // Sağ kare (BC=11,10)
            [2, 0, 6, 4],    // Sarma kare (BC=10,00) - sol-sağ sarma
            
            // Dikey sütun çiftleri (sarmalı)
            [0, 2, 4, 6],    // 1. ve 3. sütun (BC=00,10)
            [1, 3, 5, 7],    // 2. ve 4. sütun (BC=01,11)
        ];

        for (const group of groups4) {
            if (this.isValidGroup(group, minterms)) {
                this.allPossibleGroups.push({
                    minterms: [...group],
                    size: 4,
                    term: this.generateOptimalTerm(group),
                    isPrime: this.isPrimeImplicant(group, minterms)
                });
            }
        }
    }

    find2Groups3Var(minterms) {
        const groups2 = [];
        
        // Yatay komşular (Gray code sırasına göre)
        const rows = [
            [0, 1, 3, 2],      // Üst satır (A=0)
            [4, 5, 7, 6]       // Alt satır (A=1)
        ];
        
        for (const row of rows) {
            for (let i = 0; i < row.length; i++) {
                const next = (i + 1) % row.length;
                groups2.push([row[i], row[next]]);
            }
        }
        
        // Dikey komşular
        groups2.push([0, 4], [1, 5], [3, 7], [2, 6]);

        for (const group of groups2) {
            if (this.isValidGroup(group, minterms)) {
                this.allPossibleGroups.push({
                    minterms: [...group],
                    size: 2,
                    term: this.generateOptimalTerm(group),
                    isPrime: this.isPrimeImplicant(group, minterms)
                });
            }
        }
    }

    find1Groups3Var(minterms) {
        for (const minterm of minterms) {
            this.allPossibleGroups.push({
                minterms: [minterm],
                size: 1,
                term: this.generateOptimalTerm([minterm]),
                isPrime: this.isPrimeImplicant([minterm], minterms)
            });
        }
    }

    // 2 değişkenli harita için tüm geçerli grupları bul
    findAllGroups2Var(minterms) {
        if (minterms.length === 4) {
            this.allPossibleGroups.push({
                minterms: [...minterms],
                size: 4,
                term: '1',
                isPrime: true
            });
            return;
        }

        this.find2Groups2Var(minterms);
        this.find1Groups2Var(minterms);
    }

    find2Groups2Var(minterms) {
        const groups2 = [
            [0, 1], // Üst satır (A=0)
            [2, 3], // Alt satır (A=1)
            [0, 2], // Sol sütun (B=0)
            [1, 3], // Sağ sütun (B=1)
        ];

        for (const group of groups2) {
            if (this.isValidGroup(group, minterms)) {
                this.allPossibleGroups.push({
                    minterms: [...group],
                    size: 2,
                    term: this.generateOptimalTerm(group),
                    isPrime: this.isPrimeImplicant(group, minterms)
                });
            }
        }
    }

    find1Groups2Var(minterms) {
        for (const minterm of minterms) {
            this.allPossibleGroups.push({
                minterms: [minterm],
                size: 1,
                term: this.generateOptimalTerm([minterm]),
                isPrime: this.isPrimeImplicant([minterm], minterms)
            });
        }
    }

    // Bir grubun geçerli olup olmadığını kontrol et
    isValidGroup(group, minterms) {
        return group.every(minterm => minterms.includes(minterm));
    }

    // Prime implicant kontrolü
    isPrimeImplicant(group, allMinterms) {
        // Bir grup prime implicant'tır eğer daha büyük bir gruba genişletilemiyorsa
        for (const possibleGroup of this.allPossibleGroups) {
            if (possibleGroup.size > group.length && 
                group.every(minterm => possibleGroup.minterms.includes(minterm))) {
                return false;
            }
        }
        return true;
    }

    // Optimal kapsama bulma (Petrick's method basitleştirilmiş)
    findOptimalCovering(minterms) {
        console.log('🔍 Optimal grup kapsama başlatılıyor...');
        console.log('Bulunan tüm gruplar:', this.allPossibleGroups);
        
        // Önce grupları boyut ve öncelik sırasına göre sırala (büyükten küçüğe)
        const sortedGroups = this.allPossibleGroups
            .filter(group => group.minterms.some(m => minterms.includes(m))) // Sadece ilgili grupları al
            .sort((a, b) => {
                // 1. Öncelik: Grup boyutu (büyük gruplar önce)
                if (a.size !== b.size) return b.size - a.size;
                // 2. Öncelik: Kapsadığı minterm sayısı
                const aRelevant = a.minterms.filter(m => minterms.includes(m)).length;
                const bRelevant = b.minterms.filter(m => minterms.includes(m)).length;
                return bRelevant - aRelevant;
            });
        
        console.log('Sıralanmış gruplar:', sortedGroups);
        
        // Greedy yaklaşımla optimal kapsama bul
        const selectedGroups = [];
        const coveredMinterms = new Set();
        const targetMinterms = new Set(minterms.filter(m => this.karnoValues[m] === 1)); // Sadece 1'leri kapsa
        
        console.log('Kaplanacak mintermler:', Array.from(targetMinterms));
        
        for (const group of sortedGroups) {
            // Bu grup yeni mintermler kapsıyor mu?
            const newMinterms = group.minterms.filter(m => 
                targetMinterms.has(m) && !coveredMinterms.has(m)
            );
            
            if (newMinterms.length > 0) {
                selectedGroups.push(group);
                group.minterms.forEach(m => {
                    if (targetMinterms.has(m)) {
                        coveredMinterms.add(m);
                    }
                });
                
                console.log(`✅ Grup seçildi: ${group.size}'lü grup, yeni mintermler: [${newMinterms.join(',')}]`);
                console.log(`   Kapsanan toplam: [${Array.from(coveredMinterms).join(',')}]`);
                
                // Tüm mintermler kaplandı mı?
                if (coveredMinterms.size === targetMinterms.size) {
                    console.log('🎯 Tüm mintermler kaplandı!');
                    break;
                }
            }
        }
        
        // Sonucu ata
        this.groups = selectedGroups.map((group, index) => ({
            ...group,
            id: index + 1,
            color: this.getGroupColor(index)
        }));
        
        console.log('✅ Seçilen optimal gruplar:', this.groups);
    }

    // Essential prime implicant'ları bul
    findEssentialPrimeImplicants(minterms, primeImplicants) {
        const essential = [];
        const coveredMinterms = new Set();
        
        for (const minterm of minterms) {
            const coveringGroups = primeImplicants.filter(group => 
                group.minterms.includes(minterm)
            );
            
            if (coveringGroups.length === 1) {
                const essentialGroup = coveringGroups[0];
                if (!essential.includes(essentialGroup)) {
                    essential.push(essentialGroup);
                    essentialGroup.minterms.forEach(m => coveredMinterms.add(m));
                }
            }
        }
        
        return essential;
    }

    // Minimal kapsama bulma (greedy approach)
    findMinimalCovering(minterms, primeImplicants, essentialPrimes) {
        const selected = [...essentialPrimes];
        const coveredMinterms = new Set();
        
        // Essential prime'ların kapsadığı mintermleri işaretle
        essentialPrimes.forEach(group => {
            group.minterms.forEach(m => coveredMinterms.add(m));
        });
        
        // Kalan mintermleri greedy algoritma ile kapsa
        const remainingPrimes = primeImplicants.filter(group => !selected.includes(group));
        
        while (coveredMinterms.size < minterms.length && remainingPrimes.length > 0) {
            // En çok yeni minterm kapsayan grubu seç
            let bestGroup = null;
            let maxNewCoverage = 0;
            
            for (const group of remainingPrimes) {
                const newCoverage = group.minterms.filter(m => 
                    minterms.includes(m) && !coveredMinterms.has(m)
                ).length;
                
                if (newCoverage > maxNewCoverage) {
                    maxNewCoverage = newCoverage;
                    bestGroup = group;
                }
            }
            
            if (bestGroup && maxNewCoverage > 0) {
                selected.push(bestGroup);
                bestGroup.minterms.forEach(m => {
                    if (minterms.includes(m)) {
                        coveredMinterms.add(m);
                    }
                });
                
                const index = remainingPrimes.indexOf(bestGroup);
                remainingPrimes.splice(index, 1);
            } else {
                break;
            }
        }
        
        this.allPossibleGroups = selected;
    }

    selectOptimalGroups(activeMinterms) {
        // Sadece aktif mintermleri kapsayan grupları seç
        const coveredMinterms = new Set();
        const selectedGroups = [];
        
        // Boyuta göre sırala (büyükten küçüğe)
        const sortedGroups = this.allPossibleGroups.sort((a, b) => b.size - a.size);
        
        for (const group of sortedGroups) {
            // Bu grubun yeni aktif mintermleri kapsayıp kapsamadığını kontrol et
            const uncoveredActiveInGroup = group.minterms.filter(m => 
                activeMinterms.includes(m) && !coveredMinterms.has(m)
            );
            
            if (uncoveredActiveInGroup.length > 0) {
                selectedGroups.push(group);
                // Sadece aktif mintermleri kaplandı olarak işaretle
                uncoveredActiveInGroup.forEach(m => coveredMinterms.add(m));
                
                // Tüm aktif mintermler kaplandıysa dur
                if (coveredMinterms.size === activeMinterms.length) {
                    break;
                }
            }
        }

        this.groups = selectedGroups;
    }

    // Grup rengi döndür
    getGroupColor(index) {
        const colors = [
            '#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', 
            '#ffeaa7', '#dda0dd', '#98d8c8', '#f39c12'
        ];
        return colors[index % colors.length];
    }

    generateOptimalTerm(minterms) {
        if (minterms.length === 1) {
            // Tek minterm için tam terim oluştur
            const minterm = minterms[0];
            const binary = minterm.toString(2).padStart(this.variableCount, '0');
            let term = '';
            
            for (let i = 0; i < this.variableCount; i++) {
                if (term.length > 0) term += '';
                if (binary[i] === '1') {
                    term += this.variables[i];
                } else {
                    term += this.variables[i] + "'";
                }
            }
            return term;
        } else {
            // Grup için ortak olmayan değişkenleri çıkar
            const binaryTerms = minterms.map(m => 
                m.toString(2).padStart(this.variableCount, '0')
            );
            
            let term = '';
            for (let i = 0; i < this.variableCount; i++) {
                const firstBit = binaryTerms[0][i];
                const allSame = binaryTerms.every(binary => binary[i] === firstBit);
                
                if (allSame) {
                    if (term.length > 0) term += '';
                    if (firstBit === '1') {
                        term += this.variables[i];
                    } else {
                        term += this.variables[i] + "'";
                    }
                }
            }
            
            return term || '1';
        }
    }

    displayGroups() {
        const groupsList = document.getElementById('groupsList');
        if (!groupsList) return;
        
        if (this.groups.length === 0) {
            groupsList.innerHTML = '<p style="color: #6b7280; font-style: italic;">Henüz grup bulunamadı. "Grupları Bul" butonuna tıklayın.</p>';
            return;
        }

        let html = '';
        this.groups.forEach((group, index) => {
            const colorClass = `group-color-${(index % 6) + 1}`;
            
            // Bu grup için invariant değişkenleri bul
            const invariants = this.findInvariantVariables(group);
            
            // Değişken durumlarını göster
            let variableStatus = '';
            this.variables.forEach(varName => {
                if (invariants.hasOwnProperty(varName)) {
                    // Sabit değişken (yeşil)
                    const value = invariants[varName];
                    variableStatus += `<span style="color: #22c55e; font-weight: bold;">${varName}=${value}</span> `;
                } else {
                    // Değişken olan (kırmızı)
                    variableStatus += `<span style="color: #ef4444; font-weight: bold;">${varName}=değişken</span> `;
                }
            });
            
            html += `
                <div class="group-item ${colorClass}" data-group-index="${index}">
                    <div class="group-header">
                        <span class="group-size">Boyut: ${group.size}</span>
                        <span class="group-term">${group.term}</span>
                    </div>
                    <div class="group-variables" style="font-size: 0.9em; margin: 8px 0;">
                        <strong>Değişkenler:</strong> ${variableStatus}
                        <br><small style="color: #6b7280;">🟢 Sabit değerler, 🔴 Değişken değerler (son terimde yer almaz)</small>
                    </div>
                    <div class="group-minterms">
                        Mintermler: ${group.minterms.join(', ')}
                    </div>
                </div>
            `;
        });
        
        groupsList.innerHTML = html;
        
        // Grup hover eventlerini ekle
        document.querySelectorAll('.group-item').forEach(item => {
            item.addEventListener('mouseenter', (e) => {
                const groupIndex = parseInt(e.currentTarget.dataset.groupIndex);
                this.highlightGroup(groupIndex);
            });
            
            item.addEventListener('mouseleave', () => {
                this.removeCellGroupHighlight();
            });
            
            // Grup tıklama event'i ekle
            item.addEventListener('click', (e) => {
                const groupIndex = parseInt(e.currentTarget.dataset.groupIndex);
                const group = this.groups[groupIndex];
                if (group) {
                    this.highlightGroupOnClick(group.id);
                }
            });
        });
    }

    highlightGroups() {
        // Remove existing group highlighting
        document.querySelectorAll('.karno-cell').forEach(cell => {
            for (let i = 1; i <= 6; i++) {
                cell.classList.remove(`group-${i}-hover`);
            }
        });

        // Add new group highlighting
        this.groups.forEach((group, index) => {
            group.minterms.forEach(minterm => {
                const cell = document.querySelector(`[data-minterm="${minterm}"]`);
                if (cell) {
                    cell.classList.add(`group-${(index % 6) + 1}`);
                }
            });
        });
    }

    highlightGroup(groupIndex) {
        // Tüm hover highlight'larını kaldır
        document.querySelectorAll('.karno-cell').forEach(cell => {
            for (let i = 1; i <= 6; i++) {
                cell.classList.remove(`group-${i}-hover`);
            }
        });
        
        if (groupIndex >= 0 && groupIndex < this.groups.length) {
            const group = this.groups[groupIndex];
            const groupClass = `group-${(groupIndex % 6) + 1}`;
            
            group.minterms.forEach(minterm => {
                const cell = document.querySelector(`[data-minterm="${minterm}"]`);
                if (cell) {
                    cell.classList.add(`${groupClass}-hover`);
                }
            });
        }
    }

    // Kilitleme fonksiyonları
    lockMap() {
        this.isLocked = true;
        this.hasGroups = true;
        
        // Hücrelere kilitli görünüm ekle
        document.querySelectorAll('.karno-cell').forEach(cell => {
            cell.classList.add('locked');
            cell.style.cursor = 'not-allowed';
        });
        
        console.log('🔒 Karno haritası kilitlendi - grup oluşturma tamamlandı');
    }
    
    unlockMap() {
        this.isLocked = false;
        this.hasGroups = false;
        
        // Hücrelerdeki kilitli görünümü kaldır
        document.querySelectorAll('.karno-cell').forEach(cell => {
            cell.classList.remove('locked');
            cell.style.cursor = 'pointer';
        });
        
        console.log('🔓 Karno haritası kilidi açıldı - yeni minterm girişi yapılabilir');
    }
    
    showLockMessage() {
        // Geçici uyarı mesajı göster
        const message = document.createElement('div');
        message.className = 'lock-message';
        message.innerHTML = `
            <i class="fas fa-lock"></i>
            Gruplar oluşturulduktan sonra minterm girişi yapılamaz!<br>
            <small>Yeni minterm girmek için önce "Temizle" butonuna basın.</small>
        `;
        
        document.body.appendChild(message);
        
        // 3 saniye sonra mesajı kaldır
        setTimeout(() => {
            if (message && message.parentNode) {
                message.parentNode.removeChild(message);
            }
        }, 3000);
        
        console.log('⚠️ Kilitleme uyarısı gösterildi');
    }
    
    // Grup tıklama ile vurgulama
    highlightGroupOnClick(groupId) {
        // Önce tüm vurgulamaları temizle
        document.querySelectorAll('.karno-cell').forEach(cell => {
            cell.classList.remove('group-clicked');
            for (let i = 1; i <= 6; i++) {
                cell.classList.remove(`group-${i}-clicked`);
            }
        });
        
        // Seçili grubu vurgula
        const group = this.groups.find(g => g.id === groupId);
        if (group) {
            group.minterms.forEach(minterm => {
                const cell = document.querySelector(`[data-minterm="${minterm}"]`);
                if (cell) {
                    cell.classList.add('group-clicked', `group-${groupId}-clicked`);
                }
            });
            
            console.log(`🎯 Grup ${groupId} vurgulandı:`, group.minterms);
        }
    }

    // ...existing code...
}

// Sayfa yüklendiğinde uygulamayı başlat
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM yüklendi, KarnoMap başlatılıyor...');
    
    // Eğer zaten başlatılmışsa tekrar başlatma
    if (karnoApp) {
        console.log('KarnoMap zaten başlatılmış, tekrar başlatılmıyor');
        return;
    }
    
    try {
        karnoApp = new KarnoMap();
        console.log('KarnoMap başarıyla başlatıldı:', karnoApp);
    } catch (error) {
        console.error('KarnoMap başlatılırken hata oluştu:', error);
    }
});

// Global window.onload fallback
window.onload = function() {
    if (!karnoApp) {
        console.log('Fallback: window.onload ile KarnoMap başlatılıyor...');
        try {
            karnoApp = new KarnoMap();
            console.log('KarnoMap fallback ile başlatıldı:', karnoApp);
        } catch (error) {
            console.error('KarnoMap fallback başlatılırken hata oluştu:', error);
        }
    }
};
